OpenSakuraMenu
{
	if AutoUpdates[1] == 2 //If an update is available, the user will be notified when they try to open the menu
	{
		"\0\s[0]Новое обновление.\w8\w8 Хочешь обновить?"
		--
		//Note: the download it now option will go straight into updating without directing to another function. You can do this with some things using 'script:' in the function name, but it's finicky. If this gives you issues feel free to replace it.
		"\_q\n\n\![*]\q[Да\, сейчас,script:\![updatebymyself\]]\n/
		\![*]\q[Позже\, может быть.,UpdateLater]\n\n/
		\![*]\q[Выключить авто\-обновление,UpdateOff]\e"
	}
	else //Normal menu opening
	{
		"\0\b2\s[0]Прывітанне."
		"\0\b2\s[0]Ты что-нибудь хочешь?"
		--
		OnMenuRun
	}
}

Select.UpdateLater //If the user decides to update later
{
	AutoUpdates[1] = 1
	
	"\0\s[0]Так,\w4 я тебя запомнить через день.\e"
}

Select.UpdateOff //If the user no longer wants to be notified about updates
{
	AutoUpdates[0] = "Выкл"
	AutoUpdates[1] = 1
	
	"\0\s[0]Выключен.\w4 Ты можешь включить с меню конфигурации.\e"
}

OnMenuRun //Main menu
{
	"\b2\n\n\_q"
	--
	if lastTalk != ""
	{"\![*]\q[Повтори это?,OnLastTalk]"}
	--
	"\n/
	\![*]\q[Говорить,OnAiTalk]\n/
	\![*]\q[Говорить с приведение,OnStartTalking]\n\n/
	\![*]\q[Функции,OnFunctionMenu]\n\n/"
	//\![*]\q[Мне грустно,OnSadMenu]\n\н"
	--
	if debug == 1 //%(debug = 1) in script input to show the debug options
	{
		"\![*]\q[Test Variable,OnTestVar]\n/
		 \![*]\q[To-do list,OnTemplateTodo]\n/
		 \![*]\q[Check Template Version,OnTemplateUpdate]\n\n"
		//The template update check is in zzz_todo.dic. It doesn't do a network update, it checks my website and compares your version to the most recent version. It cannot update automatically, so as not to erase your progress.
	}
	--
	"\![*]\q[...Даже\, ничего,Cancel]\n\n"
	--
	"%(wd) %(hour):%(nowmin), %(day)/%(month)/%(year) - %(season)"
	--
	"\nВреся выполнения: %(runtime[0]):%(runmin)            Версия %(ghostver)\e"
}

OnLastTalk //Repeats the last thing the ghost said
{"%(lastTalk)\e"}

//----------Function Menu----------
OnFunctionMenu
{
	"\0\_q\b2\s[0]Да? Что мне делать?"
	--
	"\n/
	\![*]\q[Конфигурация,OnConfigMenu]\н\n/
	\![*]\q[Октрыть Календарь,OpenCalendar]\n/
	\![*]\q[Проверить Почту,CheckEmail]\n/
	\![*]\q[Открыть Настройки SSP,SSPPrefs]\n/
	\![*]\q[Отчистить корзину,RecycleBin]\n/
	\![*]\q[Показать Информация Система,SystemInfo]\n/
	\![*]\q[Сообщить об Ошибке,BugReport]\n/
	\![*]\q[Проверить Обновление,UpdateCheck]\n\n/
	\![*]\q[К главное меню,OnMenuRun]\e"
}

Select.OpenCalendar
{
	"\0\s[0]Вот она."
	--
	"\![open,calendar]\e"
}

Select.CheckEmail //The dialogue about checking emails will happen in the biff function, no need to add dialogue here
{"\![biff]\e"}

Select.SSPPrefs
{
	"\0\s[0]Так, открою."
	--
	"\![open,configurationdialog]\e"
}

Select.RecycleBin
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n") //Gets the number of items in the recycle bin
	
	"Ладно,\w4 я иду отчистить.\w8\w8\s[-1]\w8\w8\w8\w8\n\n"
	--
	if _gomicheck > 0 //If there was something to empty
	{
		_gomi = FUNCTIONEX("gomi.dll", "-f") //Calling the Saori to empty the recycle bin _s = ""; if _gomicheck != 1; _s = "s" //Plural check
		_и = ""; if _gomicheck != 1; _и = "и"
		
		"\s[0]Все!\w8\w8 %(_gomicheck) штук%(_и) отчистил. Как и в работу, так и здесь..."
	}
	else //If it's empty
	{
		"\s[0]Пустой. Ты не замети%(л)...?"
	}
	--
	"\n\n\![*]\q[К меню функции,OnFunctionMenu]\n\![*]\q[Все,cancelnodialogue]\e"
}

Select.SystemInfo //Partially copied from the GT template, but I tweaked a few things
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\b[2]\_q/
	OS: %(os_name) %(os_version)\n/
	Загрузку Памяти: %(memoryload)%\n/
	Физическая Память: %(memoryavailphys) KB\n/
	CPU: %(cpu_name) %(cpu_clockex)MHz\n/
	Рабочем Состоянии: %(systemuphour):%(systemupminute):%(systemupsecond)\n\n/
	Укагака: %property[baseware.version]\n\n/
	\![*]\q[К функции,OnFunctionMenu]\n/
	\![*]\q[Всё,cancelnodialogue]\e"
}

Select.BugReport
{
	"\0\s[0]Можешь сообшить \_a[https://github.com/SmokyCinnamon/indifferentsorrel/issues]здесь\_a, если у тебя аккаунт по github."
	--
	"\n\n\![*]\q[К функции,OnFunctionMenu]\n\![*]\q[Это все,cancelnodialogue]\e"
}

Select.UpdateCheck //Starts an update check
{"\![updatebymyself]\e"}



//----------Config Menu----------
OnConfigMenu //I moved changing name/pronouns/birthday over to Nameteach, because they're info about the user
{
	//This is here in case the variables get erased. The buttons will be set to default so the user has something to click. This has happened to my users before and resetting them is a painful process. Do not remove these.
	if username == ""; username = "Пользователь"
	//if heshe == ""; {heshe = "they"; himher = "them"; hisher = "their"; hesshes = "they're"}
	if birthday[0] == ""; birthday[0] = "???"
	if hemisphere == ""; hemisphere = "Северном"
	if talkrate == ""; {talkrate = "каждый 5 минут"; aitalkinterval = 300}
	if deleteshitai == ""; deleteshitai = "Выкл"
	if AutoUpdates[0] == ""; AutoUpdates[0] = "Вкл"
	if betaTester == ""; betaTester = "Выкл"
	--
	//the \_l[97] is telling it to put the ---Config--- at x 97, the middle of the balloon I use. Adjust as needed for your balloon, or remove it if you want
	if reference0 == "cancelled name change"; "\![close,inputbox,OnNameTeach]" //If the user cancels changing their name, it will send them back to the config menu, and run this extra bit of code to close the inputbox. Same deal with the others below, but for the birthday
	elseif reference0 == "cancelled birthday month"; "\![close,inputbox,OnUserBornMonth]"
	elseif reference0 == "cancelled birthday day"; "\![close,inputbox,OnUserBornDay]"
	if "cancelled birthday" _in_ reference0; {birthday = oldbirthday; ERASEVAR("oldbirthday")} //resets the birthday to the old values, erases the temp variable
	--
	"\_q\b2\_l[97]---Config---\n\n/
	Имя: \q[%(имя),OnChangeName]\n/
	Местоимение: \q[%(он)/%(его)/%(ему),OnChangePronoun]\n/
	День Рождения: \q[%(birthday[0]),OnChangeBirthday]\n/
	Полушарие: \q[%(hemisphere),ToggleHemisphere]\n\n/
	Время разговоров: \q[%(talkrate),ChangeTalk]\n\n/
	\![*]Включить Авто-Обновление?\n(Сейчас: \q[%(AutoUpdates[0]),ToggleUpdate])\n/
	//\![*]Opt in to beta updates? (Сейчас: \q[%(betaTester),ToggleBeta])\n\n/
	\![*]Включить Удаление? (Сейчас: \q[%(deleteshitai),ToggleUninstall])\n\n/
	\![*]\q[Назад,OnFunctionMenu]\n \![*]\q[К меню,OnMenuRun]\e"
}

Select.ToggleHemisphere
{
	if hemisphere != "Северном"
	{
		hemisphere = "Северном"
	}
	else
	{
		hemisphere = "Южном"
	}
	--
	OnConfigMenu
}

Select.ChangeTalk
{
	"\0\s[0]Как часто поговорить?\w8 В этом момент это %(talkrate)\n\n/
	\![*]\q[Каждый 30 секунд,OnTalkRate,Thirty]\n/
	\![*]\q[Каждая минута,OnTalkRate,Minute]\n/
	\![*]\q[Каждый 3 минут,OnTalkRate,ThreeMin]\n/
	\![*]\q[Каждый 5 минута,OnTalkRate,FiveMin]\n/
	\![*]\q[Никогда,OnTalkRate,None]\n\n/
	\![*]\q[Назад,OnConfigMenu]\e"
}

OnTalkRate
{
	if reference0 == "Thirty"
	{
		talkrate = "каждый 30 секунд" //this displays the talk rate in the menu
		aitalkinterval = 30 //this changes the talk rate, in seconds
		
		"\0\s[0]Очень часто."
	}
	elseif reference0 == "Minute"
	{
		talkrate = "каждая минута"
		aitalkinterval = 60
		
		"\0\s[0]Если уверен."
	}
	elseif reference0 == "ThreeMin"
	{
		talkrate = "каждый 3 минут"
		aitalkinterval = 180
		
		"\0\s[0]Не так часто."
	}
	elseif reference0 == "FiveMin"
	{
		talkrate = "каждый 5 минута"
		aitalkinterval = 300
		
		"\0\s[0]Хорошо."
	}
	else
	{
		talkrate = "никогда"
		aitalkinterval = 0
		
		"\0\s[0]Вот, я не говорю."
	}
	--
	"\n\n\![*]\q[Назад,OnConfigMenu]\n\![*]\q[Это все,cancelnodialogue]\e"
}

Select.ToggleUpdate
{
	if AutoUpdates[0] != "Вкл"
	{AutoUpdates[0] = "Вкл"}
	else
	{AutoUpdates[0] = "Выкл"}
	--
	OnConfigMenu
}

Select.ToggleBeta
{
	if betaTester != "Вкл" //If you don't want a message about opting into beta updates, replace this whole bit with betaTester = "On"
	{
		"\0\s[0]\b2If you want a message about risks of running beta versions,\w4 put it here!\w8\w8 Remember to back up your save files just in case!"
		--
		"\n\n\![*]\q[Accept the risk and opt in,OptInBeta]\n\![*]\q[No thanks,toconfig]\e"
	}
	else
	{betaTester = "Выкл"}
	--
	OnConfigMenu
}

Select.OptInBeta
{
	betaTester = "Вкл"
	--
	OnConfigMenu
}

Select.ToggleUninstall
{
	if deleteshitai != "Вкл"
	{deleteshitai = "Вкл"}
	else
	{deleteshitai = "Выкл"}
	--
	OnConfigMenu
}

//----------Misc Functions----------

OnChoiceTimeout //Menu has timed out
{"\0\s[0]Ты уш%(ёл)?\e"}

Select.Cancel //If the main menu has been cancelled
{"\0\s[0]А, хорошо.\e"}

OnTestVar
{
	знакомство = 50
	"Testing!\e"
	
	LOGGING("This is a debug function! This text will show up in Tama, or in the SHIORI log! You can also output variables and such with this function. This is super handy for debugging without having to output data to your ghost's balloon! Especially for things like loops, where you need to see certain variables at every step of the loop. Make good use of it!")
}


//============Kero Menu============

OpenKeroMenu
{
	"\1* Почему ты здесь?\n\n"
	"\1* Здарова.\n\n"
	"\1* Right-click on whatever object this is if you want to learn belarusian.\n\n"
	--
	OnKeroMenu
}

OnKeroMenu
{
	"\1%*\в(№Чисти%(л) все,senditaway]\n/
	\![*]\q[Ничего,cancelnodialogue]\e"
}
Select.senditaway {"\1\s[-1]\e"}

OnSadMenu {
	"Почему?\н\н/
	\!%*\в(№Не знаю,OnSads,незнает№)\н/
	\!%*\в(№Мы не сможем жить вечно,OnSads,существо№)\n/
	\!%*\в(№Боюсь\, что никого мне не помнить,OnSads,память№)\n/
	\!%*\в(№Другое дело,OnSads,ещенет№)\н/
	\н\![*]\q[Назад,OnMenuRun]\n\![*]\q[Это все,cancelnodialogue]\к"
}
OnSads {
	case reference0 {
		when "незнает" {"Эй, %(имя)? Ты - мой друг. Мы друзья. А есть на свете цветы, кошки, и тааак много людей. А они все прекрасные, как и ты. Ты прекрасный человек. Может, это ничего не значит, но я рад тебя видеть.\к"}
		when "существо" {"Ну да. Все есть своё конец. Я не знаю что об этом сказать. Если бы мы жили вечно... ну.\к"}
		when "память" {"Нет, он тебя помнить. Ты один в этом мире, и есть никакого так как себя. Они помнит тебя.\к"}
		when "ещенет" {"А. Ну, я всегда здесь. Ты мне нравится.\к"}
		others {"Ну я все-таки просто программа. И тебе получи%(лось) ошибку.\к"}
	}
}