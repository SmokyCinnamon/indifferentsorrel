ghostver {"1.1.1"}

OnNotifySelfInfo {
	//get the absolute path to the shell
	_abshell = reference4
	//get her absolute path - erase /shell/master/ (14 characters)
	if reference4 != ''; tab_path = ERASE(reference4,-14,14)
	LOGGING("notify self info")
	LOGGING("%(tab_path)")
}

OnTestVar
{
	"Testing!\x"
	--
	LOGGING("This is a debug function! This text will show up in Tama, or in the SHIORI log! You can also output variables and such with this function. This is super handy for debugging without having to output data to your ghost's balloon! Especially for things like loops, where you need to see certain variables at every step of the loop. Make good use of it!")
	//"\![raise,OnWinfo]"
}

OpenSakuraMenu
{
	if AutoUpdates[1] == 2 //If an update is available, the user will be notified when they try to open the menu
	{
		"\0\s[0]\_q%(menutalks[0])"
		--
		//Note: the download it now option will go straight into updating without directing to another function. You can do this with some things using 'script:' in the function name, but it's finicky. If this gives you issues feel free to replace it.
		"\n\n\![*]\q[%(menutalks[1]),script:\![updatebymyself\]]\n/
		\![*]\q[%(menutalks[2]),UpdateLater]\n/
		\![*]\q[%(menutalks[3]),UpdateOff]\_q\e"
	}
	else //Normal menu opening
	{
		"\0\b2\s[0]%(menutalks[4])"
		"\0\b2\s[0]%(menutalks[5])"
		--
		OnMenuRun
	}
}

Select.UpdateLater //If the user decides to update later
{
	AutoUpdates[1] = 1
	
	"\0\s[0]%(menutalks[6])\e"
}

Select.UpdateOff //If the user no longer wants to be notified about updates
{
	AutoUpdates[0] = "Off"
	AutoUpdates[1] = 1
	
	"\0\s[0]%(menutalks[7])\e"
}

OnMenuRun : all //Main menu
{
	"\b2\n\n\_q"
	--
	if lastTalk != ""
	{
		"\![*]\q[%(menutalks[8]),OnLastTalk]\n"
	}
	--
	//\![*]\q[Say something,OnAiTalk]\n
	"\![*]\q[%(menutalks[9]),OnStartTalking]\n\n"
	"\![*]\q[%(menutalks[10]),OnLessonPick] %*\q[%(menutalks[11]),OnDictionary]\n"
	"%*\__q[OnGameMenu]%(menutalks[12])\__q\n"
	--; "%*\__q[CustomExplain]%(menutalks[13])\__q\n"
	--; if lescreator == "On" {"%*\__q[OnEditLesson]%(menutalks[14])\__q %*\__q[OnOpenDocs]%(menutalks[15])\__q\n%*\__q[OnCourseExport]%(menutalks[16])\__q\n\n[half]"}
	--
	if debug == 1 //%(debug = 1) in script input to show the debug options
	{
		"\n[half]\![*]\q[Test Variable,OnTestVar] %*\__q[OnEditInbuilt]Inbuilt Lessons\__q\n%*\__q[OnLessonCheck]Re-check default folder\__q\n\n[half]"
		//The template update check is in zzz_todo.dic. It doesn't do a network update, it checks my website and compares your version to the most recent version. It cannot update automatically, so as not to erase your progress.
	}
	"%*\__q[OnConfigMenu]%(menutalks[17])\__q \![*]\q[%(menutalks[18]),OnFunctionMenu]\n"
	"%*\__q[OnChangeLog]%(menutalks[19])\__q\n"
	"\![*]\q[%(menutalks[20]),Cancel]\n\n"
	--
	"%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year) - %(season)"
	--
	"\n%(menutalks[21]) %(runtime[0]):%(runmin)    %(menutalks[22]) %(ghostver)\e"
}

OnLastTalk //Repeats the last thing the ghost said
{
	"%(lastTalk)\e"
}

Select.CustomExplain {
	"\0\s[0]\b[2]\![set,autoscroll,disable]\_q%(menutalks[23])\n\n%*\__q[OnMenuRun]%(menutalks[24])\__q %*\__q[cancelnodialogue]%(menutalks[25])\__q\_q"
}
OnOpenDocs {
	"%(menutalks[26])\n\n%*\__q[OnMenuRun]%(menutalks[24])\__q %*\__q[cancelnodialogue]%(menutalks[25])\__q"
}

//----------Function Menu----------
OnFunctionMenu : all
{
	"\0\_q\b2\s[0]%(menutalks[27])"
	"\n\n"
	"\![*]\q[%(menutalks[28]),SystemInfo]\n"
	"\![*]\q[%(menutalks[29]),BugReport]\n"
	"\![*]\q[%(menutalks[30]),UpdateCheck]\n\n"
	"\![*]\q[%(menutalks[31]),OnMenuRun]\e"
}

Select.SystemInfo //Partially copied from the GT template, but I tweaked a few things
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\b[2]\_q/
	%(menutalks[32]) %(os_name) %(os_version)\n/
	%(menutalks[33]) %(memoryload)%\n/
	%(menutalks[34]) %(memoryavailphys) KB\n/
	%(menutalks[35]) %(cpu_name) %(cpu_clockex)MHz\n/
	%(menutalks[36]) %(systemuphour):%(systemupminute):%(systemupsecond)\n\n/
	%(menutalks[37]) %property[baseware.version]\n\n/
	\![*]\q[%(menutalks[38]),OnFunctionMenu]\n/
	\![*]\q[%(menutalks[39]),cancelnodialogue]\e"
}

Select.BugReport
{
	"\0\s[0]%(menutalks[40])"
	--
	"\n\n\![*]\q[%(menutalks[41]),OnFunctionMenu]\n\![*]\q[%(menutalks[42]),cancelnodialogue]\e"
}

Select.UpdateCheck //Starts an update check
{
	"\![updatebymyself]\e"
}



//----------Config Menu----------
OnConfigMenu : all //I moved changing name/pronouns/birthday over to Nameteach, because they're info about the user
{
	//This is here in case the variables get erased. The buttons will be set to default so the user has something to click. This has happened to my users before and resetting them is a painful process. Do not remove these.
	if username == ""; username = "User"
	if birthday[0] == ""; birthday[0] = "???"
	if hemisphere == ""; hemisphere = "Northern"
	if deleteshitai == ""; deleteshitai = "Off"
	if AutoUpdates[0] == ""; AutoUpdates[0] = "On"
	if lescreator == ""; lescreator = "Off"
	--
	//the \_l[97] is telling it to put the ---Config--- at x 97, the middle of the balloon I use. Adjust as needed for your balloon, or remove it if you want
	if reference0 == "cancelled name change"; "\![close,inputbox,OnNameTeach]" //If the user cancels changing their name, it will send them back to the config menu, and run this extra bit of code to close the inputbox. Same deal with the others below, but for the birthday
	elseif reference0 == "cancelled birthday month"; "\![close,inputbox,OnUserBornMonth]"
	elseif reference0 == "cancelled birthday day"; "\![close,inputbox,OnUserBornDay]"
	if "cancelled birthday" _in_ reference0; {birthday = oldbirthday; ERASEVAR("oldbirthday")} //resets the birthday to the old values, erases the temp variable
	--
	"\_q\b2\_l[97]---%(menutalks[43])---\n\n"
	"\__q[OnPeraklad]%(menutalks[44]) %(peraklad)\__q\n"
	"%(menutalks[45]) \q[%(username),OnChangeName]\n"
	//"Your pronouns: \q[%(they)/%(them),OnChangePronoun]\n"
	"%(menutalks[46]) \q[%(birthday[0]),OnChangeBirthday]\n\n"
	"%(menutalks[47]) \q[%(hemisphere),ToggleHemisphere]\n"
	"\__q[ToggleLescreate]%(menutalks[48]) %(lescreator)\__q\n"
	"\__q[ToggleWinfo]%(menutalks[49]) %Flag('winfoinfo')\__q\n"
	"\![*]%(menutalks[50]) \q[%(AutoUpdates[0]),ToggleUpdate]\n"
	"\![*]%(menutalks[51]) \q[%(deleteshitai),ToggleUninstall]\n\n"
	"\![*]\q[%(menutalks[52]),OnMenuRun]\e"
}
Select.ToggleWinfo {
	if Flag("winfoinfo") == 0 {AddFlag("winfoinfo")}; else {RemoveFlag("winfoinfo")}
	--
	OnConfigMenu
}
Select.ToggleLescreate {
	if lescreator != "%(menutalks[53])" {lescreator = "%(menutalks[53])"}; else {lescreator = "%(menutalks[54])"}
	--
	OnConfigMenu
}
Select.ToggleHemisphere
{
	if hemisphere != "%(menutalks[55])"
	{
		hemisphere = "%(menutalks[55])"
	}
	else
	{
		hemisphere = "%(menutalks[56])"
	}
	--
	OnConfigMenu
}

Select.ToggleUpdate
{
	if AutoUpdates[0] != "%(menutalks[53])"
	{
		AutoUpdates[0] = "%(menutalks[53])"
	}
	else
	{
		AutoUpdates[0] = "%(menutalks[54])"
	}
	--
	OnConfigMenu
}

Select.ToggleUninstall
{
	if deleteshitai != "%(menutalks[53])"
	{
		deleteshitai = "%(menutalks[53])"
	}
	else
	{
		deleteshitai = "%(menutalks[54])"
	}
	--
	OnConfigMenu
}

//----------Misc Functions----------

OnChoiceTimeout //Menu has timed out
{
	"\0\s[0]%(menutalks[57])\e"
}

Select.Cancel //If the main menu has been cancelled
{
	//"\0\s[0]Ok,\w4 let me know if you need something!\e"
}

//============Kero Menu============

OpenKeroMenu
{
	"\1\s[10]%(menutalks[58])"
	"\1\s[10]%(menutalks[59])"
	"\1\s[10]%(menutalks[60])"
	--; "\n\n"; --
	OnKeroMenu
}

OnKeroMenu : all
{
	if stickybuter == 1; "%*\__q[OnUnsticky]%(menutalks[61])\__q\n"
	//if stickybuter == 0; "%*\__q[OnUnsticky,sticky]Sticky\__q\n"
	"%*\__q[Cancelnodialogue]%(menutalks[62])\__q"
}

OnUnsticky {
	if reference0 == "Sticky" {stickybuter = 1; "\1\![set,sticky-window,1,0]"}
	else {
		LOGGING("before %(stickybuter)")
		stickybuter = 0
		--
		LOGGING("after %(stickybuter)")
		stickybuter = 0
		"\1\![reset,sticky-window]\4"
}}

OnEditInbuilt {
	"\0\b[2]\_q"; --
	if ARRAYSIZE(inbuiltlessonname) != 0 {
		_output = ''
		for _i = 0; _i < ARRAYSIZE(inbuiltlessonname); _i++ {
			  _output += "%*%(inbuiltlessonname[_i]) "
			}
		"%(_output)"
	}
	--; "\n\n%*\__q[OnOpenLessonIn]Edit\__q %*\__q[OnLessonCreateNameIn]Add Lesson\__q %*\__q[OnRenameStartIn]Rename\__q %*\__q[OnClearOneIn]Delete\__q\n/
	%*\__q[OnSkillNumStartIn]Correct Lesson Numbers\__q"
	--; "\n\n\n%*\__q[OnMenuRunIn]Main Menu\__q\_q\*\e"
}
OnSkillNumStartIn {
	_display = ""
	for _i = 0; _i < ARRAYSIZE(inbuiltlessonname); _i++
	{
		_display += "%*\__q[OnSkillNumIn,%(inbuiltlessonname[_i]),%(_i)]%(inbuiltlessonname[_i])\__q "
	}
	"\0\s[0]\b[2]\_qSelect the lesson to correct:\n\n[half]%(_display)\n\n\n[half]/
	%*\__q[OnEditInbuilt]Back\__q \![*]\q[Main Menu,OnMenuRun]\_q\*\e"
}
OnSkillNumIn {
	LOGGING("%(reference0)")
	FCHARSET(1)
	_file = "lessons\default\%(reference0).txt"; _buff = ""
	FOPEN(_file,'r')
	--; for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file) {
		LOGGING("AAAfileopenAAA")
		if RE_SEARCH(_buff,'skill_number\[(\d\d?)\]') {
			LOGGING("%(RE_GETSTR)AAA%(_buff)AAA%(skillnum)AAA%(numprog)AAA")
			TOINT(RE_GETSTR[1]); inbuiltskillnum[reference1] = RE_GETSTR[1]}}
	--; FCLOSE(_file)
	LOGGING("%(_file) %(skillnum[reference1]) %(reference1)")
	--; OnSkillNumStartIn
}
OnOpenLessonIn {
	_display = ""
	for _i = 0; _i < ARRAYSIZE(inbuiltlessonname); _i++
	{
		_display += "%*\__q[OnOpenLessonEditIn,%(inbuiltlessonname[_i]),%(_i)]%(inbuiltlessonname[_i])\__q "
	}
	"\0\s[0]\b[2]\_qSelect the lesson to edit:\n\n[half]%(_display)\n\n\n[half]/
	%*\__q[OnEditInbuilt]Back\__q \![*]\q[Main Menu,OnMenuRun]\_q\*\e"
}
OnOpenLessonEditIn {
	LOGGING("%(reference0)")
	FCHARSET(1)
	_file = "lessons\default\%(reference0).txt"; _buff = ""
	--; "\![open,file,%(_file)]"
	--; OnOpenLessonIn
}
OnLessonCreateNameIn {
	"\0\b[2]\_qPlease enter the name of your lesson:\![open,inputbox,OnLessonCreateIn,0]\*"
}
OnLessonCreateIn {
	_name = reference0
	_file = "/lessons/default/%(reference0).txt"
	if ASEARCH(_name,inbuiltlessonname) == -1 {inbuiltlessonname ,= _name}
	--
	FCHARSET(1) //characterset??
	FOPEN(_file,'w'); _buff = "" //opening the file?? I think??
	LOGGING("File opened: %(_f) reference: %(reference0) file: %(_file)")
	FWRITE(_file,"skill_number[0]")
	FWRITE(_file,"lesson_notes[]")
	FWRITE(_file,"sentence_translation[]")
	FWRITE(_file,"alternate_translation[]")
	FWRITE(_file,"word_searches[]")
	FWRITE(_file,"word_matches[]")
	FCLOSE(_file)
	FOPEN(_file,'r')
	--; for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file) {
		LOGGING("AAAfileopenAAA")
		if RE_SEARCH(_buff,'skill_number\[(\d\d?)\]') {
			LOGGING("%(RE_GETSTR)AAA%(_buff)AAA%(skillnum)AAA%(numprog)AAA")
			TOINT(RE_GETSTR[1]); inbuiltskillnum ,= RE_GETSTR[1]; inbuiltnumprog ,= 0}}
	--; FCLOSE(_file)
	--; "\![raise,OnLessonCreatedIn,%(_name)]"
}
OnLessonCreatedIn {
	_file = "lessons\default\%(reference0).txt"
	LOGGING("HI DO YOU WORK %(reference0)")
	--; "\![open,file,%(_file)]"
	--; OnEditLessonIn
}
OnRenameStartIn {
	_display = ""
	for _i = 0; _i < ARRAYSIZE(inbuiltlessonname); _i++
	{
		_display += "%*\__q[OnRenameNameIn,%(inbuiltlessonname[_i]),%(_i)]%(inbuiltlessonname[_i])\__q "
	}
	"\0\s[0]\b[2]\_qSelect the lesson to rename:\n\n[half]%(_display)\n\n\n[half]/
	%*\__q[OnEditInbuilt]Back\__q \![*]\q[Main Menu,OnMenuRun]\_q\*\e"
}
OnRenameNameIn {
	"\_qPlease enter the new name: \![open,inputbox,OnRenameIn,0,--reference=%(reference0),--reference=%(reference1)]\_q\*\e"
}
OnRenameIn {
	_file = "lessons\default\%(reference2).txt"
	_filer = "lessons\default\%(reference0).txt"
	inbuiltlessonname[reference3] = "%(reference0)"
	--
	LOGGING("%(reference0) %(reference1) %(reference2) %(lessonname[reference3])")
	LOGGING("%(_file) %(_filer)")
	FRENAME(_file,_filer)
	--
	OnRenameStartIn
}
OnClearOneIn {
	_display = "" //Initialize a local variable to hold the display

	for _i = 0; _i < ARRAYSIZE(inbuiltlessonname); _i++ //Loop through every element of the array
	{
		_display += "%*\__q[OnClearIn,%(_i),%(inbuiltlessonname[_i])]%(inbuiltlessonname[_i])\__q " //Add the current element to a string, with a linebreak afterwards
	}
	"\0\s[0]\b[2]\_qSelect the lesson to delete (make sure you don't want to keep it -- you won't be able to get it back!):\n\n[half%(_display)\n\n\n[half]/
	%*\__q[OnEditInbuilt]Back\__q \![*]\q[Main Menu,OnMenuRun]\_q\*\e"
}

OnClearIn {
	inbuiltlessonname[reference0] = IARRAY
	inbuiltnumprog[reference0] = IARRAY
	inbuiltskillnum[reference0] = IARRAY
	--
	_file = "lessons\default\%(reference1).txt"
	FDEL(_file)
	--
	OnClearOneIn
}
