OnWinfo : all {
	if debug == 1 {
	"\_q"; --
	_i = FUNCTIONEX("window_info.dll")
	_display = ""
	foreach valueex; _program {
		_program = REPLACE(_program,"\","\\")
		_display += "\![*]%(_program)\n\n[half]"
		LOGGING("%(_program)")
		}
	LOGGING("pspspsps math man %(valueex)")
	if ASEARCH("CapJaxMathFax™ for Smooth Math Sailing!",valueex) != -1 {
		AddFlag("CapJaxOpen"); "it's him; math man"
		//CapJaxMathFax�
		_minmax = FUNCTIONEX("window_info.dll","getcaption","Tadora")
		"\ni feel liek this should be working %(_minmax)\1%(valueex)\0"
	}
	else {RemoveFlag("CapJaxOpen"); "math man is no more. perhaps he never was"}
	"\n\n\b4\![set,autoscroll,disable]%(_display)\_q"
}}

/* 
|CopyCatKill| is a function to delete duplicates from an array

 USAGE:
    CopyCatKill(array)
 
 Examples:
    CopyCatKill(1,2,2,6,3,7,8,6) would return '1,2,6,3,7,8'
    CopyCatKill("1,2,2,6,3,7,8,6") would return '1,2,6,3,7,8'
    CopyCatKill("cat","dog","parrot","dog","moth") would return "cat,dog,parrot,moth"
    CopyCatKill("cat,dog,parrot,dog,moth") would return "cat,dog,parrot,moth"

    animals = "cat,dog,parrot,dog,moth"
    CopyCatKill(animals) would return 'cat,dog,parrot,moth'

 !! Function is case sensitive !!
 To make the function case insensitive REPLACE:
    if _argv[_i] == _argv[_j]; _argv[_j] = ""
 WITH:
    if TOLOWER(_argv[_i]) == TOLOWER(_argv[_j]); _argv[_j] = ""
 */

CopyCatKill
{
    _printArr = IARRAY //make an empty array
    _arrSize = ARRAYSIZE(_argv) //get size
    --
    if _arrSize == 1
    {
        _argv = SPLIT(_argv,",")
        _arrSize = ARRAYSIZE(_argv)
    }
    --
    for _i = 0;_i < _arrSize; _i++ //Loop to get every element of the array
    {
        for _j = _i+1; _j < _arrSize; _j++ //Loop to check agains every other element of the array
        {
            if _argv[_i] == _argv[_j]; _argv[_j] = "" //if the elements are the same, replace with empty string
        }
        --
        if _argv[_i] != ""; _printArr ,= _argv[_i] //if the elemet is not an empty string, add to the empty array
    }
    --
    _printArr //return the new array
}

//Written by Zichqec https://zichqec.github.io/s-the-skeleton/

//Usage: This is intended to take the place of single-use variables that only contain 0 or 1, used as flags for certain events and such. With these functions, you can store all those flags as a single array, meaning you can make as many flags as you want without having to really worry about save bloat. It can also make your code a bit more readable!

//You'll want to put 'MiscFlags = IARRAY' into your OnFirstBoot. That'll set up an empty array for flags to be stored in.
//When you want to check if a flag is set or not, you can do it like so:
//if Flag("My Flag") == 0
//or
//if Flag("My Flag") == 1

//Any flags that are NOT in the array are 0, and any flags that ARE in the array are 1. So, to set a flag to 1, you add it to the array like this:
//if Flag("My Flag") == 0; MiscFlags ,= "My Flag"

//You don't technically need the if check there, but it stops duplicate entries from being added. The ,= is also important; that adds a new element to an array. Don't use += for this!

//If you want to set a flag back to 0, you can remove it like so:
//RemoveFlag("My Flag")

Flag //Checks to see if a flag exists. Returns 1 if yes, returns 0 if no
{
	if ASEARCH(_argv[0],MiscFlags) != -1; 1
	else; 0
}

RemoveFlag //Removes all instances of a flag in the array.
{
	_elements = ASEARCHEX(_argv[0],MiscFlags)
	if ARRAYSIZE(_elements) > 0
	{
		for _i = ARRAYSIZE(_elements) - 1; _i >= 0; _i-- //Goes from the end of the list to the start, so the elements stay in the same positions while we erase
		{
			_current = _elements[_i]
			MiscFlags[_current] = IARRAY
		}
	}
}
//by smokycinnamonroll if it matters to u
//for zi's flag system. to use just do AddFlag("urflag") and this will handle it
AddFlag {
    if Flag(_argv[0]) == 0; MiscFlags ,= _argv[0]
    //_argv[0] is the string passed to it (so "urflag"). all it's doing is checking if the flag exists, and if it doesnt, adding it
}


//You can get other information about the OS here, it's in the other references. Reference0 includes the OS system, version, and display name
OnNotifyOSInfo
{
	NotifyOS = reference0
}


OnInstallBegin
{
	"\0\s[0]%(etctalks[0])\e"
}

//Finished installing something ghost related. You can remove any of the ifs here if you like, and just have it go to the else.
//reference0 is the type of installed item, reference1 is the name.
OnInstallComplete
{
	if reference0 == "ghost"
	{
		"\0\s[0]%(etctalks[1])\n\n"
		--
		"\![*]\q[%(etctalks[2]),CallGhost]\n/
		\![*]\q[%(etctalks[3]),ChangeToGhost]\n\n/
		\![*]\q[%(etctalks[4]),cancelnodialogue]\e"
	}
	else //Even if you get rid of some of the ifs above, you should keep this else as a catch-all.
	{
		"\0\s[0]%(etctalks[5])\e"
	}
}

//Calling the ghost that was just installed. Add dialogues to these if you like.
Select.CallGhost
{
	"\![call,ghost,lastinstalled]\e"
}

//Opening the ghost that was just installed.
Select.ChangeToGhost
{
	"\![change,ghost,lastinstalled]\e"
}

//reference0 is the reason the install failed
OnInstallFailure //If the install fails
{
	if reference0 == "artificial" //If the user cancels by double clicking the balloon
	{
		"\0\s[0]%(etctalks[6])\e"
	}
	else
	{
		"\0\s[0]%(etctalks[7])\e"
	}
}

//reference0 is the Sakura name of the ghost the item was meant for, reference1 (since SSP 2.4.85) is the type of item you tried to install
OnInstallRefuse
{
	"\0\s[0]%(etctalks[8])\e"
}

//reference0 is the name of what you're making a nar for, reference2 is what you're making (balloon/ghost/etc)
OnNarCreated //Finished creating
{
	"\0\s[0]%(etctalks[9])\_a\e"
}

//When you click on the anchor in the OnNarCreated dialogue, this function will open the folder you created the .nar in
OnNarLocation
{
	_path = SPLITPATH(reference0)[0] + SPLITPATH(reference0)[1]
	
	"\C\![open,file,%(_path)]"
}

//----Uninstalling----

//Bringing up the uninstall option
OnVanishSelecting
{
	"\0\s[0]%(etctalks[10])\e"
}

//Deciding to uninstall
OnVanishSelected
{
	"\0\s[0]%(etctalks[11])\w8\w8\e"
}

//Changing your mind
OnVanishCancel 
{
	"\0\s[0]%(etctalks[12])\e"
}

//----Network update---

//When the ghost finishes checking for updates
//reference0 is 'none' if there are no new files, and 'changed' if there are new files. reference1 is a list of the changed files, separated by commas
OnUpdateCheckComplete 
{
	if reference0 == "none" //If there are no new files
	{
		if AutoUpdates[1] == 1 //Sets it so it won't check again until at least midnight
	}
	else
	{
		AutoUpdates[1] = 2 //This makes it so the ghost will tell the user there's a new update next time they open their menu
	}
}

//Starting to actually update
OnUpdateBegin
{
	"\0\s[0]%(etctalks[13])\w8\w8\e"
}

//reference0 is the number of new files, starting from 0
OnUpdateReady
{
	reference0++ //Number of files starts from 0, so this displays the correct amount
	"\0\s[0]%(etctalks[14])\w8\w8\e"
}

//When the update finishes. Don't forget to initialize any new variables you've created, more on that in Bootend.
//reference0 is 'none' if there were no new files to update with, reference1 is a list of new file names, separated by commas
OnUpdateComplete
{
	UpdateVars
	AutoUpdates[1] = 0
	if reference0 == "none"
	{
		"\0\s[0]%(etctalks[15])\e"
	}
	else
	{
		UpdateVars //Sets new variables upon a successful update. See the end of Bootend for an explanation on this.
		
		"\0\s[0]%(etctalks[16])"
		--
		"\n\n\![*]\q[%(etctalks[17]),OnChangeLog]\n\![*]\q[%(etctalks[18]),NoChangelog]\e"
	}
}

//the autoscroll tag here means the user will see the changelog starting from the top. I recommend putting the new versions on top, and old versions under that.
OnChangeLog
{
	"\![open,file,changelog.txt]"
}

Select.NoChangelog
{
	"\0\s[0]%(etctalks[19])\e"
}

//Taken from the GT template because I see no reason to redo this and probably break it
//reference0 is the file currently being downloaded
OnUpdate.OnDownloadBegin
{
	"\0\s[0]\b2\_q%(etctalks[20])\n\n"
	--
	_Update_Progress = TOINT(reference1) + 1
	_Update_Total = TOINT(reference2) + 1
	Update_Remaining = _Update_Total - _Update_Progress

	//defining starting points
	_PointA = 1
	_PointB = 1

	//defining text buffers beforehand, otherwise they don't display right
	_txt = ""

	//loop calculates how many check boxes to display based on the variables above

	while _PointA <= _Update_Progress
	{
		_txt += "ў"
		_PointA++
	}
	//see above except for blank boxes
	while _PointB <= Update_Remaining
	{
		_txt += "у"
		_PointB++
	}
	--
	//using the text buffers to display the correct number of boxes
	"%(_txt)\n\n%(etctalks[21])"
	--
	//flavortext

	/*if "aitalk" _in_ reference0 //this is checking to see what kind of files are being downloaded. In this case, it's looking for files called aitalk in the download queue. I prefer to leave these out because they can be a bit jarring.
	{
 		"\n\nNew random dialogue!\w8"
 	}
	elseif "mouse" _in_ reference0
	{
		"\n\nNew petting dialogue!\w8"
	}
	else //for files not specified above
	{
		""
	}*/
	--
	"\e"
}

//_remaining should be the number of the file that's giving the error, in the order they're being downloaded. currentfile will be the file path.
OnUpdate.OnMD5CompareFailure
{
	_remaining = Update_Remaining + 1
	_currentfile = SPLITPATH(reference0)[2] + SPLITPATH(reference0)[3] //This gets the name and extension of the offending file
	"\0\s[0]%(etctalks[22])\w8\w8\e"
}

//reference0 is the reason the update failed
OnUpdateFailure //If the update fails
{
	"\0\s[0]%(etctalks[23])\e"
}

//Similar to above, but for if the ghost was just checking and not actually updating
//reference0 is the reason the check failed
OnUpdateCheckFailure
{
	if AutoUpdates[1] == 1; "\e" //Stops the dialogue from showing if it's an auto check
	--
	"\0\s[0]%(etctalks[23])\e"
}

//----Misc----

OnDisplayChange
{
	displaybpp = reference0
 	displaywidth = reference1
	displayheight = reference2
}

//Hotkeys. reference0 is the name of the key as displayed on the keycap. reference4, for SSP only, will have things like ctrl and alt, separated by commas.
OnKeyPress
{
	case reference0
	{
		when "t"
		{
			OnAiTalk
		}
		when "r"
		{
			OnLastTalk
		}
		when "y" //Starts a commu dialogue with a random ghost
		{
			"\![raise,OnStartTalking]"
		}
		when "f1"
		{
			"\![open,readme]"
		}
		when "f2"
		{
			if debug == 1
			{
				OnTestVar
			}
		}
		when "c"
		{
			if debug == 1
			{
				OnCommuPingMenu
			}
		}
	}
}
